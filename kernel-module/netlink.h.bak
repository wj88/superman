#ifndef _SUPERMAN_NETLINK_H
#define _SUPERMAN_NETLINK_H

// A communication link between the kernel and the SUPERMAN daemon

#include <linux/types.h>
#include <linux/genetlink.h>
#include <net/genetlink.h>

enum {
	SUPERMAN_ATTR_ADDR,
	SUPERMAN_ATTR_MSG_LEN,
	SUPERMAN_ATTR_MSG,
	__SUPERMAN_ATTR_MAX,
#define SUPERMAN_ATTR_MAX (__SUPERMAN_ATTR_MAX - 1)
};



enum {
	SUPERMAN_DISCOVERY_REQUEST,
#define SUPERMAN_DISCOVERY_REQUEST SUPERMAN_DISCOVERY_REQUEST

	SUPERMAN_CERTIFICATE_EXCHANGE,
#define SUPERMAN_CERTIFICATE_EXCHANGE SUPERMAN_CERTIFICATE_EXCHANGE

	SUPERMAN_AUTHENTICATED_SK_REQUEST,
#define SUPERMAN_AUTHENTICATED_SK_REQUEST SUPERMAN_AUTHENTICATED_SK_REQUEST

	SUPERMAN_AUTHENTICATED_SK_RESPONSE,
#define SUPERMAN_AUTHENTICATED_SK_RESPONSE SUPERMAN_AUTHENTICATED_SK_RESPONSE

	SUPERMAN_SK_INVALIDATE,
#define SUPERMAN_SK_INVALIDATE SUPERMAN_SK_INVALIDATE

	SUPERMAN_BROADCAST_KEY_EXCHANGE,
#define SUPERMAN_BROADCAST_KEY_EXCHANGE SUPERMAN_BROADCAST_KEY_EXCHANGE

	SUPERMAN_ENCRYPT_P2P,
#define SUPERMAN_ENCRYPT_P2P SUPERMAN_ENCRYPT_P2P

	SUPERMAN_DECRYPT_P2P,
#define SUPERMAN_DECRYPT_P2P SUPERMAN_DECRYPT_P2P

	SUPERMAN_ENCRYPT_BROADCAST,
#define SUPERMAN_ENCRYPT_BROADCAST SUPERMAN_ENCRYPT_BROADCAST

	SUPERMAN_DECRYPT_BROADCAST,
#define SUPERMAN_DECRYPT_BROADCAST SUPERMAN_DECRYPT_BROADCAST

	__SUPERMAN_MAX,
#define SUPERMAN_MAX __SUPERMAN_MAX
};

static struct {
	int type;
	char *name;	       
} typenames[SUPERMAN_MAX] = { 
	{ SUPERMAN_DISCOVERY_REQUEST,		"Discovery Request"		}, 
	{ SUPERMAN_CERTIFICATE_EXCHANGE,	"Certificate Exchange"		},
	{ SUPERMAN_AUTHENTICATED_SK_REQUEST,	"Authenticated SK Request"	},
	{ SUPERMAN_AUTHENTICATED_SK_RESPONSE,	"Authenticated SK Response"	},
	{ SUPERMAN_SK_INVALIDATE,		"SK Invalidate"			},
	{ SUPERMAN_BROADCAST_KEY_EXCHANGE,	"Broadcast Key Exchange"	},
	{ SUPERMAN_ENCRYPT_P2P,			"Encrypt P2P"			},
	{ SUPERMAN_DECRYPT_P2P,			"Decrypt P2P"			},
	{ SUPERMAN_ENCRYPT_BROADCAST,		"Encrypt Broadcast"		},
	{ SUPERMAN_DECRYPT_BROADCAST,		"Decrypt Broadcast"		},
};

static inline char* superman_msg_type_to_str(int type)
{
	int i;

	for (i = 0; i < SUPERMAN_MAX; i++) {
		if (type == typenames[i].type) {
			return typenames[i].name;
		}
	}
	return "Unknown message type";
}

// A SUPERMAN discovery request message.
static struct nla_policy superman_discovery_request_genl_policy[1] = {
};

// A SUPERMAN certificate exchange message.
typedef struct superman_certificate_exchange_msg {
	u_int32_t	addr;
	u_int32_t	msg_len;
	char*		msg;		// cert
} superman_certificate_exchange_msg_t;
static struct nla_policy superman_certificate_exchange_genl_policy[4] = {
	[SUPERMAN_ATTR_ADDR]	=	{ .type = NLA_NUL_STRING },
	[SUPERMAN_ATTR_MSG_LEN] = 	{ .type = NLA_U32 },
	[SUPERMAN_ATTR_MSG]	=	{ .type = NLA_UNSPEC },
};


// A SUPERMAN authenticated SK request message.
typedef struct superman_authenticated_sk_request_msg {
	u_int32_t	addr;
} superman_authenticated_sk_request_msg_t;
static struct nla_policy superman_authenticated_sk_request_genl_policy[2] = {
	[SUPERMAN_ATTR_ADDR]	=	{ .type = NLA_NUL_STRING },
};


// A SUPERMAN authenticated SK response message.
typedef struct superman_authenticated_sk_response_msg {
	u_int32_t	addr;
	u_int32_t	msg_len;
	char*		msg;		// sk
} superman_authenticated_sk_response_msg_t;
static struct nla_policy superman_authenticated_sk_response_genl_policy[4] = {
	[SUPERMAN_ATTR_ADDR]	=	{ .type = NLA_NUL_STRING },
	[SUPERMAN_ATTR_MSG_LEN] = 	{ .type = NLA_U32 },
	[SUPERMAN_ATTR_MSG]	=	{ .type = NLA_UNSPEC },
};


// A SUPERMAN SK invalidate message.
typedef struct superman_sk_invalidate_msg {
	u_int32_t	addr;
} superman_sk_invalidate_msg_t;
static struct nla_policy superman_sk_invalidate_genl_policy[2] = {
	[SUPERMAN_ATTR_ADDR]	=	{ .type = NLA_NUL_STRING },
};


// A SUPERMAN broadcast key exchange message.
typedef struct superman_broadcast_key_exchange_msg {
	u_int32_t	addr;
	u_int32_t	msg_len;
	char*		msg;		// broadcast key
} superman_broadcast_key_exchange_msg_t;
static struct nla_policy superman_broadcast_key_exchange_genl_policy[4] = {
	[SUPERMAN_ATTR_ADDR]	=	{ .type = NLA_NUL_STRING },
	[SUPERMAN_ATTR_MSG_LEN] = 	{ .type = NLA_U32 },
	[SUPERMAN_ATTR_MSG]	=	{ .type = NLA_UNSPEC },
};


// A SUPERMAN encrypt p2p message.
typedef struct superman_encrypt_p2p_msg {
	u_int32_t	addr;
	u_int32_t	msg_len;
	char*		msg;		// non-encrypted data
} superman_encrypt_p2p_msg_t;
static struct nla_policy superman_encrypt_p2p_genl_policy[4] = {
	[SUPERMAN_ATTR_ADDR]	=	{ .type = NLA_NUL_STRING },
	[SUPERMAN_ATTR_MSG_LEN] = 	{ .type = NLA_U32 },
	[SUPERMAN_ATTR_MSG]	=	{ .type = NLA_UNSPEC },
};


// A SUPERMAN decrypt p2p message.
typedef struct superman_decrypt_p2p_msg {
	u_int32_t	addr;
	u_int32_t	msg_len;
	char*		msg;		// encrypted data
} superman_decrypt_p2p_msg_t;
static struct nla_policy superman_decrypt_p2p_genl_policy[4] = {
	[SUPERMAN_ATTR_ADDR]	=	{ .type = NLA_NUL_STRING },
	[SUPERMAN_ATTR_MSG_LEN] = 	{ .type = NLA_U32 },
	[SUPERMAN_ATTR_MSG]	=	{ .type = NLA_UNSPEC },
};

// A SUPERMAN encrypt broadcast message.
typedef struct superman_encrypt_broadcast_msg {
	u_int32_t	addr;
	u_int32_t	msg_len;
	char*		msg;		// non-encrypted data
} superman_encrypt_broadcast_msg_t;
static struct nla_policy superman_encrypt_broadcast_genl_policy[4] = {
	[SUPERMAN_ATTR_ADDR]	=	{ .type = NLA_NUL_STRING },
	[SUPERMAN_ATTR_MSG_LEN] = 	{ .type = NLA_U32 },
	[SUPERMAN_ATTR_MSG]	=	{ .type = NLA_UNSPEC },
};


// A SUPERMAN decrypt broadcast message.
typedef struct superman_decrypt_broadcast_msg {
	u_int32_t	addr;
	u_int32_t	msg_len;
	char*		msg;		// encrypted data
} superman_decrypt_broadcast_msg_t;
static struct nla_policy superman_decrypt_broadcast_genl_policy[4] = {
	[SUPERMAN_ATTR_ADDR]	=	{ .type = NLA_NUL_STRING },
	[SUPERMAN_ATTR_MSG_LEN] = 	{ .type = NLA_U32 },
	[SUPERMAN_ATTR_MSG]	=	{ .type = NLA_UNSPEC },
};



void InitNetlink(void);
void DeInitNetlink(void);

/*
// The following is for userspace
#ifndef __KERNEL__

void SendDiscoveryRequest(void);

// The following is for the kernel
#elif

void SendCertificateExchange(u_int32_t addr, u_int32_t cert_len, char* cert);

void SendAuthenticatedSKRequest(u_int32_t addr);
void SendAuthenticatedSKResponse(u_int32_t addr, u_int32_t sk_len, char* sk);

void SendEncryptP2P(void);
void SendDecryptP2P(void);

void SendEncryptBroadcast(void);
void SendDecryptBroadcast(void);

#endif
*/


#endif

